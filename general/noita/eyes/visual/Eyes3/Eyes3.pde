
// Static
float length = 22;
float gap = 62;
float vert = 30;

// Eye data
int[] eyes1 = { 2, 0, 1, 0, 1, 3, 2, 2, 3, 3, 0, 4, 0, 4, 1, 1, 3, 0, 2, 3, 2, 1, 1, 4, 3, 1, 3, 0, 3, 3, 0, 0, 4, 0, 2, 4, 0, 0, 0, 0, 3, 2, 0, 4, 1, 2, 2, 0, 0, 0, 1, 4, 2, 2, 2, 4, 2, 1, 2, 2, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 0, 1, 3, 4, 1, 1, 1, 3, 3, 1, 0, 2, 2, 1, 0, 4, 4, 0, 0, 0, 2, 0, 0, 1, 0, 4, 0, 4, 0, 1, 4, 4, 1, 4, 2, 0, 3, 3, 0, 2, 2, 0, 3, 4, 2, 4, 1, 2, 3, 1, 3, 1, 3, 1, 3, 0, 0, 3, 1, 1, 3, 2, 1, 2, 0, 1, 4, 2, 2, 3, 1, 3, 3, 1, 4, 4, 1, 3, 4, 1, 4, 4, 1, 2, 1, 1, 0, 1, 4, 0, 0, 3, 2, 1, 2, 1, 1, 4, 1, 3, 0, 0, 4, 1, 1, 1, 0, 1, 0, 0, 2, 4, 1, 2, 4, 1, 0, 0, 4, 0, 3, 1, 0, 0, 1, 0, 4, 0, 3, 3, 1, 4, 3, 2, 3, 4, 1, 1, 2, 2, 1, 0, 1, 0, 1, 0, 0, 4, 0, 1, 2, 0, 4, 1, 2, 4, 4, 2, 4, 4, 2, 4, 0, 2, 1, 3, 3, 3, 1, 2, 2, 0, 3, 3, 0, 1, 0, 3, 1, 1, 3, 1, 1, 1, 2, 1, 1, 2, 1, 0, 3, 2, 2, 3, 1, 4, 1, 3, 1, 0, 4, 2, 4, 2, 2, 4, 1, 3, 0, 3, 0, 4, 1, 1, 0, 2, 0, 3, 1, 2, 3, 2, 0, 4, 3, 1, 3 };
int rowCount1 = 8;
int[] rowLengths1 = { 39, 39, 39, 39, 39, 39, 32, 31 };

String[][] tf_eyes =  {
  { "200", "231", "010", "143", "222", "023", "300", "104", "044", "221", "132", "240", "231", "222", "112", "024", "311", "013", "030", "303", "002", "104", "023", "144", "001", "310", "312", "130", "223", "311", "041", "034", "000", "130", "201", "230", "101", "024", "041", "240", "142", "134", "143", "132", "034", "143", "023", "142", "034", "144", "242", "111", "010", "044", "003", "133", "214", "232", "113", "144", "131", "220", "041", "101", "110", "010", "100", "040", "241", "021", "244", "211", "004", "244", "034", "241", "004", "201", "131", "133", "310", "242", "204", "223", "304", "311", "030", "031", "134", "111", "110", "022", "113", "212", "103", "023", "224", "133", "143" },
  { "310", "231", "010", "143", "222", "023", "300", "104", "044", "221", "132", "240", "231", "222", "112", "024", "311", "013", "030", "303", "002", "104", "023", "144", "001", "104", "021", "110", "202", "311", "041", "034", "000", "100", "101", "204", "040", "024", "041", "240", "142", "134", "143", "132", "034", "143", "023", "142", "034", "144", "134", "101", "214", "302", "224", "133", "304", "103", "242", "224", "001", "110", "243", "043", "232", "011", "113", "100", "224", "311", "233", "141", "032", "121", "023", "032", "041", "233", "023", "014", "141", "232", "212", "114", "222", "312", "030", "020", "243", "222", "002", "021", "230", "242", "122", "134", "020", "133", "233", "222", "014", "114", "033" },
  { "121", "231", "010", "143", "222", "023", "300", "104", "044", "221", "132", "240", "231", "222", "112", "024", "311", "013", "030", "303", "002", "104", "023", "144", "001", "234", "301", "202", "014", "143", "231", "310", "042", "224", "212", "130", "144", "303", "003", "031", "211", "034", "142", "130", "310", "011", "023", "224", "104", "144", "224", "223", "011", "144", "111", "023", "031", "020", "140", "044", "101", "302", "020", "220", "311", "221", "114", "204", "240", "041", "030", "004", "231", "302", "132", "122", "110", "042", "000", "021", "131", "242", "212", "040", "043", "212", "230", "131", "043", "033", "242", "132", "010", "003", "101", "303", "013", "010", "204", "140", "302", "100", "224", "221", "031", "134", "204", "201", "040", "223", "100", "021", "101", "140", "203", "220", "123", "114" },
  { "301", "231", "010", "144", "300", "204", "234", "141", "112", "001", "132", "220", "101", "143", "200", "310", "112", "044", "210", "221", "142", "022", "041", "022", "144", "204", "114", "100", "121", "030", "211", "210", "040", "014", "013", "222", "023", "312", "014", "134", "104", "220", "203", "312", "132", "310", "010", "133", "241", "003", "310", "302", "142", "303", "114", "100", "222", "033", "020", "144", "222", "224", "202", "311", "021", "231", "222", "023", "142", "032", "202", "240", "101", "043", "112", "111", "224", "043", "120", "112", "200", "011", "001", "100", "013", "122", "142", "133", "101", "301", "230", "233", "310", "032", "012", "140", "223", "024", "203", "223", "220", "031" },
  { "223", "231", "010", "144", "300", "204", "002", "220", "104", "130", "303", "142", "220", "300", "232", "241", "220", "002", "230", "012", "142", "024", "140", "244", "214", "131", "310", "023", "220", "023", "311", "042", "120", "200", "130", "124", "002", "214", "143", "111", "301", "002", "310", "300", "001", "211", "232", "021", "041", "013", "130", "230", "140", "300", "210", "124", "220", "132", "023", "003", "042", "212", "002", "011", "213", "014", "240", "001", "213", "211", "223", "233", "100", "304", "012", "040", "034", "224", "002", "231", "243", "110", "241", "031", "022", "110", "230", "122", "040", "023", "042", "223", "033", "141", "224", "214", "131", "311", "312", "042", "303", "121", "142", "032", "004", "011", "032", "010", "121", "304", "223", "001", "224", "234", "030", "133", "004", "213", "211", "111", "024", "224", "213", "033", "134", "303", "234", "001", "000", "141", "040", "241", "243", "100", "120", "013", "044" },
  { "114", "231", "010", "144", "300", "204", "043", "244", "021", "023", "103", "101", "034", "143", "232", "212", "122", "220", "114", "103", "244", "020", "032", "112", "021", "033", "034", "133", "034", "311", "132", "004", "222", "014", "141", "144", "112", "201", "301", "213", "004", "133", "142", "032", "232", "304", "041", "112", "134", "031", "110", "122", "101", "103", "131", "233", "212", "114", "201", "020", "234", "240", "013", "011", "141", "133", "033", "124", "142", "133", "030", "023", "113", "110", "120", "222", "122", "000", "122", "010", "123", "210", "122", "023", "130", "100", "014", "041", "021", "224", "010", "304", "132", "233", "021", "241", "021", "143", "003", "232", "221", "130", "042", "024", "120", "200", "221", "124", "021", "002", "231", "144", "201", "203", "032", "243", "121", "300", "244", "204", "044", "110", "204", "240" },
  { "102", "231", "010", "144", "300", "204", "002", "220", "104", "130", "002", "210", "014", "030", "214", "033", "233", "003", "121", "010", "142", "302", "134", "123", "001", "033", "103", "301", "004", "114", "220", "223", "213", "310", "032", "204", "304", "300", "143", "204", "210", "034", "222", "224", "024", "142", "201", "240", "300", "010", "021", "142", "140", "213", "233", "234", "304", "100", "123", "140", "243", "142", "233", "200", "114", "140", "303", "101", "304", "212", "004", "211", "042", "220", "033", "300", "133", "220", "214", "232", "223", "132", "144", "113", "130", "230", "304", "302", "012", "003", "101", "222", "111", "303", "101", "212", "234", "130", "004", "043", "101", "023", "232", "132", "123", "242", "021", "124", "230", "220", "100", "011", "310", "231", "233", "302", "214", "303", "034" },
  { "302", "231", "010", "144", "300", "204", "002", "220", "104", "130", "002", "210", "014", "030", "214", "033", "233", "003", "121", "010", "142", "220", "041", "310", "001", "242", "210", "031", "312", "120", "212", "034", "001", "231", "033", "102", "124", "032", "244", "311", "124", "024", "303", "000", "100", "230", "133", "231", "224", "123", "311", "043", "044", "200", "212", "110", "241", "300", "101", "233", "204", "212", "211", "200", "241", "243", "024", "041", "013", "112", "101", "223", "010", "122", "034", "133", "231", "142", "203", "114", "231", "043", "243", "111", "204", "123", "302", "232", "021", "223", "304", "011", "042", "041", "201", "234", "244", "041", "010", "032", "232", "122", "104", "041", "220", "024", "312", "134", "110", "004", "040", "132", "120", "001", "111", "204", "141", "040", "130", "110" },
  { "113", "231", "010", "144", "300", "204", "002", "220", "104", "130", "002", "210", "014", "030", "214", "033", "233", "003", "121", "010", "142", "113", "041", "214", "134", "033", "103", "301", "214", "114", "220", "223", "304", "102", "022", "204", "010", "144", "143", "204", "210", "202", "222", "242", "234", "020", "212", "042", "213", "143", "232", "203", "012", "114", "112", "110", "111", "034", "101", "013", "114", "141", "012", "110", "241", "210", "114", "300", "204", "014", "011", "220", "010", "043", "100", "140", "132", "310", "100", "022", "042", "301", "040", "201", "222", "041", "130", "014", "131", "020", "134", "243", "013", "113", "240", "243", "011", "111", "041", "242", "010", "130", "221", "201", "132", "231", "224", "244", "221", "100", "223", "132", "044", "131" }
};
int[] tf_rowCounts = { 4,4, 5,4, 6,5, 5,5, 5 };
int[][] tf_rowLengths = {
    { 26, 26, 26, 21 },
    { 26, 26, 26, 25 },
    { 26, 26, 26, 26, 14 },
    { 26, 26, 26, 24 },
    { 26, 26, 26, 26, 26, 7 },
    { 26, 26, 26, 26, 20 },
    { 26, 26, 26, 26, 15 },
    { 26, 26, 26, 26, 16 },
    { 26, 26, 26, 26, 10 }
};

// Variables
boolean drawEyes = false;
boolean drawLine = true;
int choice = 0;


void setup() {
    size(2200, 1000, P3D);
    ortho();
}


void draw() {
    background(0);

    // Draw UI
    textAlign(LEFT);
    textSize(20);
    fill(255);
    noStroke();
    text("q/a Choice:" + choice,   20,  40 + 30 * 3);
    text("w/s Length:" + length,   20,  40 + 30 * 0);
    text("e/d Gap:" + gap,      20,  40 + 30 * 1);
    text("r/f Vert:" + vert,     20,  40 + 30 * 2);

    // Translate camera
    translate(width * 0.5, height * 0.5);
    float pctX = constrain(map(mouseY, height * 0.2, height * 0.8, 0, 1), 0, 1);
    rotateX(PI * (0.5 - pctX * 0.5));
    float pctZ = constrain(map(mouseX, width * 0.2, width * 0.8, 0, 1), 0, 1);
    rotateZ(PI * (0.5 - pctZ));

    // Draw eyes as simple directions seperate
    // drawEyes(0);

    // Draw eye trigram as 3 segmented paths
    // translate(-width * 0.2, 0);
    // drawEyesTri(2);
    // translate(width * 0.4, 0);
    // translate(0, -height * 0.6);
    // drawEyesTri(6);

    // Draw all the messages as trigrams with 3 segmented paths
    // translate(0, 0, -length * 9);
    // for (int i = 0; i < 9; i++) {
    //     drawEyesTri(i);
    //     translate(0, 0, length * 3);
    // }
    
    // Draw the eyes using the new 3 layered approach
    drawEyesTriLayered(0, true);
    translate(0, gap);
    drawEyesTriLayered(1, true);
}


void drawEyes(int index) {
    stroke(255);
    strokeWeight(3);
    noFill();

    // Pick what message to use
    int[] msg = eyes1;
    int rowCount = rowCount1;
    int[] rowLengths = rowLengths1;

    // Draw eyes
    translate(-gap * rowLengths[0] / 2.0, -gap * 2.5);
    for (int row = 0, i = 0; row < rowCount; row++) {
        int rowLength = rowLengths[row];

        for (int col = 0; col < rowLength; col++, i++) {
            float x = col * gap + ((row % 2 == 1) ? gap * 0.5 : 0);
            float y = row * gap;

            int val = msg[i];
            float dx = 0 + (val == 2 ? 1 : val == 4 ? -1 : 0);
            float dy = 0 + (val == 1 ? -1 : val == 3 ? 1 : 0);
            float dz = (val == 0 ? 1 : 0);

            if (drawLine) line(x, y, 0, x + dx * length, y + dy * length, dz * length);
            if (drawEyes) rect(x - 4, y - 4, 8, 8);
        }
    }
}


void drawEyesTri(int index) {
    push();
    stroke(255);
    strokeWeight(3);
    noFill();

    // Pick what message to use
    String[] msg = tf_eyes[index];
    int rowCount = tf_rowCounts[index];
    int[] rowLengths = tf_rowLengths[index];

    // Draw eyes
    translate(-gap * rowLengths[0] / 2.0, -rowCount * 0.5);
    for (int row = 0, i = 0; row < rowCount; row++) {
        int rowLength = rowLengths[row];

        for (int col = 0; col < rowLength; col++, i++) {
            push();
            float x = col * gap;
            float y = row * gap;
            float z = 0;
            translate(x, y, z);
            // if (col % 2 == 1) translate(0, 0, length * 3);

            if (drawEyes) rect(-4, -4, 8, 8);
            if (drawLine) {
                for (int o = 0; o < 3; o++) {
                    char val = msg[i].charAt(o);
                    // float dx = (0 + (val == '2' ? 1 : val == '4' ? -1 : 0)) * length;
                    // float dy = (0 + (val == '1' ? -1 : val == '3' ? 1 : 0)) * length;
                    // float dz = (val == '0' ? 1 : 0) * length;
                    float dx = (0 + (val == '2' ? 1 : val == '4' ? -1 : 0)) * length;
                    float dy = (0 + (val == '0' ? -1 : 0)) * length;
                    float dz = (val == '1' ? -1 : val == '3' ? 1 : 0) * length;
                    line(0, 0, 0, dx, dy, dz);
                    translate(dx, dy, dz);
                }
            }
            pop();
        }
    }
    pop();
}


void drawEyesTriLayered(int index, boolean straight) {
    push();
    stroke(255);
    strokeWeight(2);
    noFill();

    // Pick what message to use
    String[] msg = tf_eyes[index];
    int rowCount = tf_rowCounts[index];
    int[] rowLengths = tf_rowLengths[index];
    if (straight) {
        rowCount = 1;
        rowLengths[0] = msg.length;
    }

    // Centre and then draw eyes
    translate(-gap * tf_eyes[0].length / 2.0, -rowCount * 0.5);
    for (int row = 0, i = 0; row < rowCount; row++) {
        int rowLength = rowLengths[row];

        // Move to base position of each trigram
        for (int col = 0; col < rowLength; col++, i++) {
            push();
            float x = col * gap;
            float y = row * gap;
            float z = 0;
            translate(x, y, z);

            // Draw outline rect for each layer
            if (drawEyes) {
                push();
                rotate(-PI * 0.25);
                rectMode(CENTER);
                float sl = sqrt(2 * length * length);
                rect(0, 0, sl, sl);
                translate(0, 0, -vert);
                rect(0, 0, sl, sl);
                translate(0, 0, -vert);
                rect(0, 0, sl, sl);
                pop();
            }

            // Draw lines
            if (drawLine) {
                char val0 = msg[i].charAt(0);
                char val1 = msg[i].charAt(1);
                char val2 = msg[i].charAt(2);

                // Looking up
                // float p0x = (val0 == '2' ? 1  : val0 == '4' ? -1 : 0) * length;
                // float p0y = (val0 == '0' ? -1 : 0) * length;
                // float p1x = -(val1 == '2' ? 1  : val1 == '4' ? -1 : 0) * length;
                // float p1y = (val1 == '0' ? -1 : 0) * length;
                // float p2x = (val2 == '2' ? 1  : val2 == '4' ? -1 : 0) * length;
                // float p2y = (val2 == '0' ? -1 : 0) * length;

                // Normal
                float p0x = (val0 == '2' ? 1  : val0 == '4' ? -1 : 0) * length;
                float p0y = (val0 == '1' ? -1 : val0 == '3' ? 1  : 0) * length;
                float p1x = (val1 == '2' ? 1  : val1 == '4' ? -1 : 0) * length - length * 0.5;
                float p1y = (val1 == '1' ? -1 : val1 == '3' ? 1  : 0) * length - length * 0.5;
                float p2x = (val2 == '2' ? 1  : val2 == '4' ? -1 : 0) * length;
                float p2y = (val2 == '1' ? -1 : val2 == '3' ? 1  : 0) * length;
                
                line(p0x, p0y, 0,       p1x, p1y, -vert);
                line(p1x, p1y, -vert,   p2x, p2y, -vert * 2);
            }
            pop();
        }
    }
    pop();
}


void keyPressed() {
    if (keyCode == 49) drawEyes = !drawEyes;
    if (keyCode == 50) drawLine = !drawLine;
    if (keyCode == 81) choice = (choice + 1) % 9;
    if (keyCode == 65) choice = (choice + 8) % 9;
    if (keyCode == 87) gap -= 2;
    if (keyCode == 83) gap += 2;
    if (keyCode == 69) length += 2;
    if (keyCode == 68) length -= 2;
    if (keyCode == 82) vert += 2;
    if (keyCode == 70) vert -= 2;
}
