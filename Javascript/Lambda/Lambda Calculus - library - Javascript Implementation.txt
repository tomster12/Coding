t = a => b => a
f = a => b => b

not = bl => bl(f)(t)
or = x => y => x(x)(y)
and = x => y => x(y)(x)
xor = x => y => x(not(y))(y)

n0 = f => a => a
n1 = f => a => f(a)
n2 = f => a => f(f(a))
jsnum = n => n(x => x + 1)(0)

b = f => g => a => f(g(a))
apply = f => a => a(f)

succ = n => f => b(f)(n(f))
pred = n => fst(n(phi)(pair(n0)(n0)))

add = n => k => n(succ)(k)
pow = n => k => a => k(n)(a)
mult = n => k => a => n(k(a)) // b
sub = n => k => k(pred)(n)

pair = a => b => f => f(a)(b)
fst = p => p(t)
snd = p => p(f)
phi = p => pair(snd(p))(succ(snd(p)))

is0 = n => n(t(f))(t)
l = and(leq)(not(eq))g = not(leq)
leq = n => k => is0(sub(n)(k))
eq = n => k => and(leq(n)(k))(leq(k)(n))
geq = or(geq)(eq)
g = not(leq)

nil = pair(t)(t)

listMake = v => pair(f)(pair(v)(nil))
listAdd = nv => l => pair(f)(pair(nv)(l(f)))
listGet = n => l => (add(n)(n1))(apply(f))(l)(t)


// -------------------------------------------------------